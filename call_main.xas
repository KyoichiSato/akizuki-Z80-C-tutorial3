%%TOOL	  'xcc-v V10.07	 5a12' ,250208152707
%%COMPILE language=C , source=call_main,cps=2,dps=2
;	Cross C	Compiler  XCC-V	 V10.07	(5a12) -08010000:0000-
;		== Z80 (V07.02)	5430 ==		
		extnal	_memcpy
		extnal	_memset
		extnal	_main
		extnal	_CPMRESET
		global	_CALL_MAIN
		global	_argc
		global	_argv
		global	_ARG_BUFF
B_call_main		sect	comm
_argc:
		ds	2
_argv:
		ds	40
_ARG_BUFF:
		ds	127
I_call_main		sect	comm
S1:
		db	0
%%BFILE	  'C:\Users\uts\OneDrive\Documents\program\Z80\XCC-V‚ÌŽg‚¢•û3\call_main.c' ,250207173507,64
C_call_main		sect	code
%%BFILE	  'C:\akiz80\INCLUDE\string.h' ,050803172034,44
%%BFILE	  'C:\akiz80\INCLUDE\memory.h' ,050803171952,23
%%TYP	  'void'	      ,	  0, 0,	0,   11111111b,	0
%%TYP	  'char'	      ,	  1, 2,	1,   00111111b,	2
%%TYP	  'unsigned char'     ,	  2, 2,	1,   01111111b,	2
%%TYP	  'short'	      ,	  3, 3,	2,   00111111b,	2
%%TYP	  'unsigned short'    ,	  4, 3,	2,   01111111b,	2
%%TYP	  'int'		      ,	  5, 3,	2,   00111111b,	2
%%TYP	  'unsigned int'      ,	  6, 3,	2,   01111111b,	2
%%TYP	  'long'	      ,	  7, 3,	4,   00111111b,	4
%%TYP	  'unsigned long'     ,	  8, 3,	4,   01111111b,	4
%%TYP	  'float'	      ,	  9, 4,	4,   00000000b,	4
%%TYP	  'double'	      ,	 10, 4,	8,   00000001b,	8
%%TYP	  'enum'	      ,	 11, 8,	2,   00111111b,	2
%%TYP	  'struct'	      ,	 12, 9,	0,   11111111b,	0
%%TYP	  'union'	      ,	 13,10,	0,   11111111b,	0
%%EFILE	  
%%EFILE	  
%%SYM	  argc,0,type=5,cls=2,val=_argc,size=2
%%SYM	  argv,0,type=1,cls=2,val=_argv,size=40
%%DTY	  
%%DPT	  
%%DAR	  2,20
%%ENDD	  
%%SYM	  ARG_BUFF,0,type=1,cls=2,val=_ARG_BUFF,size=127
%%DTY	  
%%DAR	  1,127
%%ENDD	  
%%LINE	  000024
%%FUNC	  CALL_MAIN,3,cls=2,type=0
_CALL_MAIN:
		push	IX
		ld	IX,0
		add	IX,SP
		push	HL
%%BF	  
%%SYM	  ptr,0,type=1,cls=6,val=-2,size=2
%%DTY	  
%%DPT	  
%%ENDD	  
;	ptr -> -2	(0fffeh)	 pointer
%%LINE	  000027
;Expr(27): memset(ARG_BUFF,0,sizeof(ARG_BUFF))	
		ld	BC,127
		push	BC
		ld	DE,0
		push	DE
		ld	HL,_ARG_BUFF
		push	HL
		call	_memset
%%LINE	  000028
;Expr(28): argv[0]=""	
		ld	BC,S1
		ld	(_argv),BC
%%LINE	  000029
;Expr(29): argc=0	
		ld	DE,0
		ld	(_argc),DE
; - if -
%%LINE	  000032
;Expr(32): 1<*(unsigned	char *)000080	
		pop	HL
		pop	HL
		pop	HL
		ld	A,(128)
		cp	1
		jr.x	z,L2
		jr.x	c,L2
;
; - then -
%%BB	  line=33
%%LINE	  000037
;Expr(37): memcpy(ARG_BUFF,(void *)000081,007e)	
		ld	HL,126
		push	HL
		ld	DE,129
		push	DE
		ld	DE,_ARG_BUFF
		push	DE
		call	_memcpy
; - for	-
%%LINE	  000039
;Expr(39): ptr=ARG_BUFF	
		ld	BC,_ARG_BUFF
		ld	(IX-2),C
		ld	(IX-1),B
		pop	DE
		pop	DE
		pop	DE
L3:
;Expr(39): ptr<(ARG_BUFF+ *(unsigned char *)000080)	
		ld	A,(128)
		ld	C,A
		ld	B,0
		ld	HL,_ARG_BUFF
		add	HL,BC
		ld	D,H
		ld	E,L
		ld	L,(IX-2)
		ld	H,(IX-1)
		or	A
		sbc	HL,DE
		jr.x	nc,L7
;
		jr.x	L4
L5:
;Expr(39): ptr++	
		ld	C,(IX-2)
		ld	B,(IX-1)
		inc	BC
		ld	(IX-2),C
		ld	(IX-1),B
		jr.x	L3
L4:
%%BB	  line=40
; - if -
%%LINE	  000041
;Expr(41): ' '==*ptr	
		ld	L,(IX-2)
		ld	H,(IX-1)
		ld	B,(HL)
		ld	A,B
		cp	32
		jr.x	nz,L9
;
; - then -
%%BB	  line=42
%%LINE	  000043
;Expr(43): *ptr=0	
		ld	(HL),0
; - if -
%%LINE	  000045
;Expr(45): ' '==*(ptr+ 1)	
		ld	L,(IX-2)
		ld	H,(IX-1)
		inc	HL
		ld	B,(HL)
		ld	A,B
		cp	32
		jr.x	nz,L11
;
; - then -
%%BB	  line=46
; - continue -
%%LINE	  000048
		jr.x	L5
%%EB	  
; - endif -
;
L11:
%%LINE	  000051
;Expr(51): argc++	
		ld	BC,(_argc)
		inc	BC
		ld	(_argc),BC
%%LINE	  000052
;Expr(52): argv[argc]=ptr+ 1	
		ld	E,(IX-2)
		ld	D,(IX-1)
		inc	DE
		sla	C
		rl	B
		ld	HL,_argv
		add	HL,BC
		ld	(HL),E
		inc	HL
		ld	(HL),D
; - if -
%%LINE	  000053
;Expr(53): 20<=argc	
		ld	HL,(_argc)
		ld	BC,20
		or	A
		sbc	HL,BC
		jp	m,L0000000014
		jp	po,L0000000015
		jr.x	L13
L0000000014:
		jp	po,L13
L0000000015:
;
; - then -
%%BB	  line=54
; - break -
%%LINE	  000055
		jr.x	L6
%%EB	  
; - endif -
;
L13:
%%EB	  
; - endif -
;
L9:
%%EB	  
%%LINE	  000058
		jr.x	L5
; - endfor -
L6:
;
L7:
%%EB	  
; - endif -
;
L2:
%%LINE	  000061
;Expr(61): main(argc,argv)	
		ld	BC,_argv
		push	BC
		ld	DE,(_argc)
		push	DE
		call	_main
%%LINE	  000063
;Expr(63): CPMRESET()	
		call	_CPMRESET
%%LINE	  000064
%%EF	  
		ld	SP,IX
		pop	IX
		ret
%%FEND	  
;	ptr -> offset -2	 pointer
%%EFILE	  
		end
